#
# Autogenerated by Thrift
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#

    module Flock
      module Shards
        class Client
          include ::Thrift::Client

          def create_shard(shard)
            send_create_shard(shard)
            return recv_create_shard()
          end

          def send_create_shard(shard)
            send_message('create_shard', Create_shard_args, :shard => shard)
          end

          def recv_create_shard()
            result = receive_message(Create_shard_result)
            return result.success unless result.success.nil?
            raise result.ex unless result.ex.nil?
            raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'create_shard failed: unknown result')
          end

          def find_shard(shard)
            send_find_shard(shard)
            return recv_find_shard()
          end

          def send_find_shard(shard)
            send_message('find_shard', Find_shard_args, :shard => shard)
          end

          def recv_find_shard()
            result = receive_message(Find_shard_result)
            return result.success unless result.success.nil?
            raise result.ex unless result.ex.nil?
            raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'find_shard failed: unknown result')
          end

          def get_shard(shard_id)
            send_get_shard(shard_id)
            return recv_get_shard()
          end

          def send_get_shard(shard_id)
            send_message('get_shard', Get_shard_args, :shard_id => shard_id)
          end

          def recv_get_shard()
            result = receive_message(Get_shard_result)
            return result.success unless result.success.nil?
            raise result.ex unless result.ex.nil?
            raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'get_shard failed: unknown result')
          end

          def update_shard(shard)
            send_update_shard(shard)
            recv_update_shard()
          end

          def send_update_shard(shard)
            send_message('update_shard', Update_shard_args, :shard => shard)
          end

          def recv_update_shard()
            result = receive_message(Update_shard_result)
            raise result.ex unless result.ex.nil?
            return
          end

          def delete_shard(shard_id)
            send_delete_shard(shard_id)
            recv_delete_shard()
          end

          def send_delete_shard(shard_id)
            send_message('delete_shard', Delete_shard_args, :shard_id => shard_id)
          end

          def recv_delete_shard()
            result = receive_message(Delete_shard_result)
            raise result.ex unless result.ex.nil?
            return
          end

          def add_child_shard(parent_shard_id, child_shard_id, position, weight)
            send_add_child_shard(parent_shard_id, child_shard_id, position, weight)
            recv_add_child_shard()
          end

          def send_add_child_shard(parent_shard_id, child_shard_id, position, weight)
            send_message('add_child_shard', Add_child_shard_args, :parent_shard_id => parent_shard_id, :child_shard_id => child_shard_id, :position => position, :weight => weight)
          end

          def recv_add_child_shard()
            result = receive_message(Add_child_shard_result)
            raise result.ex unless result.ex.nil?
            return
          end

          def remove_child_shard(parent_shard_id, child_shard_id)
            send_remove_child_shard(parent_shard_id, child_shard_id)
            recv_remove_child_shard()
          end

          def send_remove_child_shard(parent_shard_id, child_shard_id)
            send_message('remove_child_shard', Remove_child_shard_args, :parent_shard_id => parent_shard_id, :child_shard_id => child_shard_id)
          end

          def recv_remove_child_shard()
            result = receive_message(Remove_child_shard_result)
            raise result.ex unless result.ex.nil?
            return
          end

          def replace_child_shard(old_child_shard_id, new_child_shard_id)
            send_replace_child_shard(old_child_shard_id, new_child_shard_id)
            recv_replace_child_shard()
          end

          def send_replace_child_shard(old_child_shard_id, new_child_shard_id)
            send_message('replace_child_shard', Replace_child_shard_args, :old_child_shard_id => old_child_shard_id, :new_child_shard_id => new_child_shard_id)
          end

          def recv_replace_child_shard()
            result = receive_message(Replace_child_shard_result)
            raise result.ex unless result.ex.nil?
            return
          end

          def list_shard_children(shard_id)
            send_list_shard_children(shard_id)
            return recv_list_shard_children()
          end

          def send_list_shard_children(shard_id)
            send_message('list_shard_children', List_shard_children_args, :shard_id => shard_id)
          end

          def recv_list_shard_children()
            result = receive_message(List_shard_children_result)
            return result.success unless result.success.nil?
            raise result.ex unless result.ex.nil?
            raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'list_shard_children failed: unknown result')
          end

          def mark_shard_busy(shard_id, busy)
            send_mark_shard_busy(shard_id, busy)
            recv_mark_shard_busy()
          end

          def send_mark_shard_busy(shard_id, busy)
            send_message('mark_shard_busy', Mark_shard_busy_args, :shard_id => shard_id, :busy => busy)
          end

          def recv_mark_shard_busy()
            result = receive_message(Mark_shard_busy_result)
            raise result.ex unless result.ex.nil?
            return
          end

          def copy_shard(source_shard_id, destination_shard_id)
            send_copy_shard(source_shard_id, destination_shard_id)
            recv_copy_shard()
          end

          def send_copy_shard(source_shard_id, destination_shard_id)
            send_message('copy_shard', Copy_shard_args, :source_shard_id => source_shard_id, :destination_shard_id => destination_shard_id)
          end

          def recv_copy_shard()
            result = receive_message(Copy_shard_result)
            raise result.ex unless result.ex.nil?
            return
          end

          def setup_migration(source_shard_info, destination_shard_info)
            send_setup_migration(source_shard_info, destination_shard_info)
            return recv_setup_migration()
          end

          def send_setup_migration(source_shard_info, destination_shard_info)
            send_message('setup_migration', Setup_migration_args, :source_shard_info => source_shard_info, :destination_shard_info => destination_shard_info)
          end

          def recv_setup_migration()
            result = receive_message(Setup_migration_result)
            return result.success unless result.success.nil?
            raise result.ex unless result.ex.nil?
            raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'setup_migration failed: unknown result')
          end

          def migrate_shard(migration)
            send_migrate_shard(migration)
            recv_migrate_shard()
          end

          def send_migrate_shard(migration)
            send_message('migrate_shard', Migrate_shard_args, :migration => migration)
          end

          def recv_migrate_shard()
            result = receive_message(Migrate_shard_result)
            raise result.ex unless result.ex.nil?
            return
          end

          def set_forwarding(forwarding)
            send_set_forwarding(forwarding)
            recv_set_forwarding()
          end

          def send_set_forwarding(forwarding)
            send_message('set_forwarding', Set_forwarding_args, :forwarding => forwarding)
          end

          def recv_set_forwarding()
            result = receive_message(Set_forwarding_result)
            raise result.ex unless result.ex.nil?
            return
          end

          def replace_forwarding(old_shard_id, new_shard_id)
            send_replace_forwarding(old_shard_id, new_shard_id)
            recv_replace_forwarding()
          end

          def send_replace_forwarding(old_shard_id, new_shard_id)
            send_message('replace_forwarding', Replace_forwarding_args, :old_shard_id => old_shard_id, :new_shard_id => new_shard_id)
          end

          def recv_replace_forwarding()
            result = receive_message(Replace_forwarding_result)
            raise result.ex unless result.ex.nil?
            return
          end

          def get_forwarding(table_id, base_id)
            send_get_forwarding(table_id, base_id)
            return recv_get_forwarding()
          end

          def send_get_forwarding(table_id, base_id)
            send_message('get_forwarding', Get_forwarding_args, :table_id => table_id, :base_id => base_id)
          end

          def recv_get_forwarding()
            result = receive_message(Get_forwarding_result)
            return result.success unless result.success.nil?
            raise result.ex unless result.ex.nil?
            raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'get_forwarding failed: unknown result')
          end

          def get_forwarding_for_shard(shard_id)
            send_get_forwarding_for_shard(shard_id)
            return recv_get_forwarding_for_shard()
          end

          def send_get_forwarding_for_shard(shard_id)
            send_message('get_forwarding_for_shard', Get_forwarding_for_shard_args, :shard_id => shard_id)
          end

          def recv_get_forwarding_for_shard()
            result = receive_message(Get_forwarding_for_shard_result)
            return result.success unless result.success.nil?
            raise result.ex unless result.ex.nil?
            raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'get_forwarding_for_shard failed: unknown result')
          end

          def get_forwardings()
            send_get_forwardings()
            return recv_get_forwardings()
          end

          def send_get_forwardings()
            send_message('get_forwardings', Get_forwardings_args)
          end

          def recv_get_forwardings()
            result = receive_message(Get_forwardings_result)
            return result.success unless result.success.nil?
            raise result.ex unless result.ex.nil?
            raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'get_forwardings failed: unknown result')
          end

          def reload_forwardings()
            send_reload_forwardings()
            recv_reload_forwardings()
          end

          def send_reload_forwardings()
            send_message('reload_forwardings', Reload_forwardings_args)
          end

          def recv_reload_forwardings()
            result = receive_message(Reload_forwardings_result)
            raise result.ex unless result.ex.nil?
            return
          end

          def find_current_forwarding(table_id, id)
            send_find_current_forwarding(table_id, id)
            return recv_find_current_forwarding()
          end

          def send_find_current_forwarding(table_id, id)
            send_message('find_current_forwarding', Find_current_forwarding_args, :table_id => table_id, :id => id)
          end

          def recv_find_current_forwarding()
            result = receive_message(Find_current_forwarding_result)
            return result.success unless result.success.nil?
            raise result.ex unless result.ex.nil?
            raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'find_current_forwarding failed: unknown result')
          end

          def shard_ids_for_hostname(hostname, class_name)
            send_shard_ids_for_hostname(hostname, class_name)
            return recv_shard_ids_for_hostname()
          end

          def send_shard_ids_for_hostname(hostname, class_name)
            send_message('shard_ids_for_hostname', Shard_ids_for_hostname_args, :hostname => hostname, :class_name => class_name)
          end

          def recv_shard_ids_for_hostname()
            result = receive_message(Shard_ids_for_hostname_result)
            return result.success unless result.success.nil?
            raise result.ex unless result.ex.nil?
            raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'shard_ids_for_hostname failed: unknown result')
          end

          def shards_for_hostname(hostname, class_name)
            send_shards_for_hostname(hostname, class_name)
            return recv_shards_for_hostname()
          end

          def send_shards_for_hostname(hostname, class_name)
            send_message('shards_for_hostname', Shards_for_hostname_args, :hostname => hostname, :class_name => class_name)
          end

          def recv_shards_for_hostname()
            result = receive_message(Shards_for_hostname_result)
            return result.success unless result.success.nil?
            raise result.ex unless result.ex.nil?
            raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'shards_for_hostname failed: unknown result')
          end

          def get_busy_shards()
            send_get_busy_shards()
            return recv_get_busy_shards()
          end

          def send_get_busy_shards()
            send_message('get_busy_shards', Get_busy_shards_args)
          end

          def recv_get_busy_shards()
            result = receive_message(Get_busy_shards_result)
            return result.success unless result.success.nil?
            raise result.ex unless result.ex.nil?
            raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'get_busy_shards failed: unknown result')
          end

          def get_parent_shard(shard_id)
            send_get_parent_shard(shard_id)
            return recv_get_parent_shard()
          end

          def send_get_parent_shard(shard_id)
            send_message('get_parent_shard', Get_parent_shard_args, :shard_id => shard_id)
          end

          def recv_get_parent_shard()
            result = receive_message(Get_parent_shard_result)
            return result.success unless result.success.nil?
            raise result.ex unless result.ex.nil?
            raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'get_parent_shard failed: unknown result')
          end

          def get_root_shard(shard_id)
            send_get_root_shard(shard_id)
            return recv_get_root_shard()
          end

          def send_get_root_shard(shard_id)
            send_message('get_root_shard', Get_root_shard_args, :shard_id => shard_id)
          end

          def recv_get_root_shard()
            result = receive_message(Get_root_shard_result)
            return result.success unless result.success.nil?
            raise result.ex unless result.ex.nil?
            raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'get_root_shard failed: unknown result')
          end

          def get_child_shards_of_class(parent_shard_id, class_name)
            send_get_child_shards_of_class(parent_shard_id, class_name)
            return recv_get_child_shards_of_class()
          end

          def send_get_child_shards_of_class(parent_shard_id, class_name)
            send_message('get_child_shards_of_class', Get_child_shards_of_class_args, :parent_shard_id => parent_shard_id, :class_name => class_name)
          end

          def recv_get_child_shards_of_class()
            result = receive_message(Get_child_shards_of_class_result)
            return result.success unless result.success.nil?
            raise result.ex unless result.ex.nil?
            raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'get_child_shards_of_class failed: unknown result')
          end

        end

        class Processor
          include ::Thrift::Processor

          def process_create_shard(seqid, iprot, oprot)
            args = read_args(iprot, Create_shard_args)
            result = Create_shard_result.new()
            begin
              result.success = @handler.create_shard(args.shard)
            rescue Flock::FlockException => ex
              result.ex = ex
            end
            write_result(result, oprot, 'create_shard', seqid)
          end

          def process_find_shard(seqid, iprot, oprot)
            args = read_args(iprot, Find_shard_args)
            result = Find_shard_result.new()
            begin
              result.success = @handler.find_shard(args.shard)
            rescue Flock::FlockException => ex
              result.ex = ex
            end
            write_result(result, oprot, 'find_shard', seqid)
          end

          def process_get_shard(seqid, iprot, oprot)
            args = read_args(iprot, Get_shard_args)
            result = Get_shard_result.new()
            begin
              result.success = @handler.get_shard(args.shard_id)
            rescue Flock::FlockException => ex
              result.ex = ex
            end
            write_result(result, oprot, 'get_shard', seqid)
          end

          def process_update_shard(seqid, iprot, oprot)
            args = read_args(iprot, Update_shard_args)
            result = Update_shard_result.new()
            begin
              @handler.update_shard(args.shard)
            rescue Flock::FlockException => ex
              result.ex = ex
            end
            write_result(result, oprot, 'update_shard', seqid)
          end

          def process_delete_shard(seqid, iprot, oprot)
            args = read_args(iprot, Delete_shard_args)
            result = Delete_shard_result.new()
            begin
              @handler.delete_shard(args.shard_id)
            rescue Flock::FlockException => ex
              result.ex = ex
            end
            write_result(result, oprot, 'delete_shard', seqid)
          end

          def process_add_child_shard(seqid, iprot, oprot)
            args = read_args(iprot, Add_child_shard_args)
            result = Add_child_shard_result.new()
            begin
              @handler.add_child_shard(args.parent_shard_id, args.child_shard_id, args.position, args.weight)
            rescue Flock::FlockException => ex
              result.ex = ex
            end
            write_result(result, oprot, 'add_child_shard', seqid)
          end

          def process_remove_child_shard(seqid, iprot, oprot)
            args = read_args(iprot, Remove_child_shard_args)
            result = Remove_child_shard_result.new()
            begin
              @handler.remove_child_shard(args.parent_shard_id, args.child_shard_id)
            rescue Flock::FlockException => ex
              result.ex = ex
            end
            write_result(result, oprot, 'remove_child_shard', seqid)
          end

          def process_replace_child_shard(seqid, iprot, oprot)
            args = read_args(iprot, Replace_child_shard_args)
            result = Replace_child_shard_result.new()
            begin
              @handler.replace_child_shard(args.old_child_shard_id, args.new_child_shard_id)
            rescue Flock::FlockException => ex
              result.ex = ex
            end
            write_result(result, oprot, 'replace_child_shard', seqid)
          end

          def process_list_shard_children(seqid, iprot, oprot)
            args = read_args(iprot, List_shard_children_args)
            result = List_shard_children_result.new()
            begin
              result.success = @handler.list_shard_children(args.shard_id)
            rescue Flock::FlockException => ex
              result.ex = ex
            end
            write_result(result, oprot, 'list_shard_children', seqid)
          end

          def process_mark_shard_busy(seqid, iprot, oprot)
            args = read_args(iprot, Mark_shard_busy_args)
            result = Mark_shard_busy_result.new()
            begin
              @handler.mark_shard_busy(args.shard_id, args.busy)
            rescue Flock::FlockException => ex
              result.ex = ex
            end
            write_result(result, oprot, 'mark_shard_busy', seqid)
          end

          def process_copy_shard(seqid, iprot, oprot)
            args = read_args(iprot, Copy_shard_args)
            result = Copy_shard_result.new()
            begin
              @handler.copy_shard(args.source_shard_id, args.destination_shard_id)
            rescue Flock::FlockException => ex
              result.ex = ex
            end
            write_result(result, oprot, 'copy_shard', seqid)
          end

          def process_setup_migration(seqid, iprot, oprot)
            args = read_args(iprot, Setup_migration_args)
            result = Setup_migration_result.new()
            begin
              result.success = @handler.setup_migration(args.source_shard_info, args.destination_shard_info)
            rescue Flock::FlockException => ex
              result.ex = ex
            end
            write_result(result, oprot, 'setup_migration', seqid)
          end

          def process_migrate_shard(seqid, iprot, oprot)
            args = read_args(iprot, Migrate_shard_args)
            result = Migrate_shard_result.new()
            begin
              @handler.migrate_shard(args.migration)
            rescue Flock::FlockException => ex
              result.ex = ex
            end
            write_result(result, oprot, 'migrate_shard', seqid)
          end

          def process_set_forwarding(seqid, iprot, oprot)
            args = read_args(iprot, Set_forwarding_args)
            result = Set_forwarding_result.new()
            begin
              @handler.set_forwarding(args.forwarding)
            rescue Flock::FlockException => ex
              result.ex = ex
            end
            write_result(result, oprot, 'set_forwarding', seqid)
          end

          def process_replace_forwarding(seqid, iprot, oprot)
            args = read_args(iprot, Replace_forwarding_args)
            result = Replace_forwarding_result.new()
            begin
              @handler.replace_forwarding(args.old_shard_id, args.new_shard_id)
            rescue Flock::FlockException => ex
              result.ex = ex
            end
            write_result(result, oprot, 'replace_forwarding', seqid)
          end

          def process_get_forwarding(seqid, iprot, oprot)
            args = read_args(iprot, Get_forwarding_args)
            result = Get_forwarding_result.new()
            begin
              result.success = @handler.get_forwarding(args.table_id, args.base_id)
            rescue Flock::FlockException => ex
              result.ex = ex
            end
            write_result(result, oprot, 'get_forwarding', seqid)
          end

          def process_get_forwarding_for_shard(seqid, iprot, oprot)
            args = read_args(iprot, Get_forwarding_for_shard_args)
            result = Get_forwarding_for_shard_result.new()
            begin
              result.success = @handler.get_forwarding_for_shard(args.shard_id)
            rescue Flock::FlockException => ex
              result.ex = ex
            end
            write_result(result, oprot, 'get_forwarding_for_shard', seqid)
          end

          def process_get_forwardings(seqid, iprot, oprot)
            args = read_args(iprot, Get_forwardings_args)
            result = Get_forwardings_result.new()
            begin
              result.success = @handler.get_forwardings()
            rescue Flock::FlockException => ex
              result.ex = ex
            end
            write_result(result, oprot, 'get_forwardings', seqid)
          end

          def process_reload_forwardings(seqid, iprot, oprot)
            args = read_args(iprot, Reload_forwardings_args)
            result = Reload_forwardings_result.new()
            begin
              @handler.reload_forwardings()
            rescue Flock::FlockException => ex
              result.ex = ex
            end
            write_result(result, oprot, 'reload_forwardings', seqid)
          end

          def process_find_current_forwarding(seqid, iprot, oprot)
            args = read_args(iprot, Find_current_forwarding_args)
            result = Find_current_forwarding_result.new()
            begin
              result.success = @handler.find_current_forwarding(args.table_id, args.id)
            rescue Flock::FlockException => ex
              result.ex = ex
            end
            write_result(result, oprot, 'find_current_forwarding', seqid)
          end

          def process_shard_ids_for_hostname(seqid, iprot, oprot)
            args = read_args(iprot, Shard_ids_for_hostname_args)
            result = Shard_ids_for_hostname_result.new()
            begin
              result.success = @handler.shard_ids_for_hostname(args.hostname, args.class_name)
            rescue Flock::FlockException => ex
              result.ex = ex
            end
            write_result(result, oprot, 'shard_ids_for_hostname', seqid)
          end

          def process_shards_for_hostname(seqid, iprot, oprot)
            args = read_args(iprot, Shards_for_hostname_args)
            result = Shards_for_hostname_result.new()
            begin
              result.success = @handler.shards_for_hostname(args.hostname, args.class_name)
            rescue Flock::FlockException => ex
              result.ex = ex
            end
            write_result(result, oprot, 'shards_for_hostname', seqid)
          end

          def process_get_busy_shards(seqid, iprot, oprot)
            args = read_args(iprot, Get_busy_shards_args)
            result = Get_busy_shards_result.new()
            begin
              result.success = @handler.get_busy_shards()
            rescue Flock::FlockException => ex
              result.ex = ex
            end
            write_result(result, oprot, 'get_busy_shards', seqid)
          end

          def process_get_parent_shard(seqid, iprot, oprot)
            args = read_args(iprot, Get_parent_shard_args)
            result = Get_parent_shard_result.new()
            begin
              result.success = @handler.get_parent_shard(args.shard_id)
            rescue Flock::FlockException => ex
              result.ex = ex
            end
            write_result(result, oprot, 'get_parent_shard', seqid)
          end

          def process_get_root_shard(seqid, iprot, oprot)
            args = read_args(iprot, Get_root_shard_args)
            result = Get_root_shard_result.new()
            begin
              result.success = @handler.get_root_shard(args.shard_id)
            rescue Flock::FlockException => ex
              result.ex = ex
            end
            write_result(result, oprot, 'get_root_shard', seqid)
          end

          def process_get_child_shards_of_class(seqid, iprot, oprot)
            args = read_args(iprot, Get_child_shards_of_class_args)
            result = Get_child_shards_of_class_result.new()
            begin
              result.success = @handler.get_child_shards_of_class(args.parent_shard_id, args.class_name)
            rescue Flock::FlockException => ex
              result.ex = ex
            end
            write_result(result, oprot, 'get_child_shards_of_class', seqid)
          end

        end

        # HELPER FUNCTIONS AND STRUCTURES

        class Create_shard_args
          include ::Thrift::Struct
          SHARD = 1

          ::Thrift::Struct.field_accessor self, :shard
          FIELDS = {
            SHARD => {:type => ::Thrift::Types::STRUCT, :name => 'shard', :class => Flock::ShardInfo}
          }

          def struct_fields; FIELDS; end

          def validate
          end

        end

        class Create_shard_result
          include ::Thrift::Struct
          SUCCESS = 0
          EX = -1

          ::Thrift::Struct.field_accessor self, :success, :ex
          FIELDS = {
            SUCCESS => {:type => ::Thrift::Types::I32, :name => 'success'},
            EX => {:type => ::Thrift::Types::STRUCT, :name => 'ex', :class => Flock::FlockException}
          }

          def struct_fields; FIELDS; end

          def validate
          end

        end

        class Find_shard_args
          include ::Thrift::Struct
          SHARD = 1

          ::Thrift::Struct.field_accessor self, :shard
          FIELDS = {
            SHARD => {:type => ::Thrift::Types::STRUCT, :name => 'shard', :class => Flock::ShardInfo}
          }

          def struct_fields; FIELDS; end

          def validate
          end

        end

        class Find_shard_result
          include ::Thrift::Struct
          SUCCESS = 0
          EX = -1

          ::Thrift::Struct.field_accessor self, :success, :ex
          FIELDS = {
            SUCCESS => {:type => ::Thrift::Types::I32, :name => 'success'},
            EX => {:type => ::Thrift::Types::STRUCT, :name => 'ex', :class => Flock::FlockException}
          }

          def struct_fields; FIELDS; end

          def validate
          end

        end

        class Get_shard_args
          include ::Thrift::Struct
          SHARD_ID = 1

          ::Thrift::Struct.field_accessor self, :shard_id
          FIELDS = {
            SHARD_ID => {:type => ::Thrift::Types::I32, :name => 'shard_id'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

        end

        class Get_shard_result
          include ::Thrift::Struct
          SUCCESS = 0
          EX = -1

          ::Thrift::Struct.field_accessor self, :success, :ex
          FIELDS = {
            SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => Flock::ShardInfo},
            EX => {:type => ::Thrift::Types::STRUCT, :name => 'ex', :class => Flock::FlockException}
          }

          def struct_fields; FIELDS; end

          def validate
          end

        end

        class Update_shard_args
          include ::Thrift::Struct
          SHARD = 1

          ::Thrift::Struct.field_accessor self, :shard
          FIELDS = {
            SHARD => {:type => ::Thrift::Types::STRUCT, :name => 'shard', :class => Flock::ShardInfo}
          }

          def struct_fields; FIELDS; end

          def validate
          end

        end

        class Update_shard_result
          include ::Thrift::Struct
          EX = -1

          ::Thrift::Struct.field_accessor self, :ex
          FIELDS = {
            EX => {:type => ::Thrift::Types::STRUCT, :name => 'ex', :class => Flock::FlockException}
          }

          def struct_fields; FIELDS; end

          def validate
          end

        end

        class Delete_shard_args
          include ::Thrift::Struct
          SHARD_ID = 1

          ::Thrift::Struct.field_accessor self, :shard_id
          FIELDS = {
            SHARD_ID => {:type => ::Thrift::Types::I32, :name => 'shard_id'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

        end

        class Delete_shard_result
          include ::Thrift::Struct
          EX = -1

          ::Thrift::Struct.field_accessor self, :ex
          FIELDS = {
            EX => {:type => ::Thrift::Types::STRUCT, :name => 'ex', :class => Flock::FlockException}
          }

          def struct_fields; FIELDS; end

          def validate
          end

        end

        class Add_child_shard_args
          include ::Thrift::Struct
          PARENT_SHARD_ID = 1
          CHILD_SHARD_ID = 2
          POSITION = 3
          WEIGHT = 4

          ::Thrift::Struct.field_accessor self, :parent_shard_id, :child_shard_id, :position, :weight
          FIELDS = {
            PARENT_SHARD_ID => {:type => ::Thrift::Types::I32, :name => 'parent_shard_id'},
            CHILD_SHARD_ID => {:type => ::Thrift::Types::I32, :name => 'child_shard_id'},
            POSITION => {:type => ::Thrift::Types::I32, :name => 'position'},
            WEIGHT => {:type => ::Thrift::Types::I32, :name => 'weight'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

        end

        class Add_child_shard_result
          include ::Thrift::Struct
          EX = -1

          ::Thrift::Struct.field_accessor self, :ex
          FIELDS = {
            EX => {:type => ::Thrift::Types::STRUCT, :name => 'ex', :class => Flock::FlockException}
          }

          def struct_fields; FIELDS; end

          def validate
          end

        end

        class Remove_child_shard_args
          include ::Thrift::Struct
          PARENT_SHARD_ID = 1
          CHILD_SHARD_ID = 2

          ::Thrift::Struct.field_accessor self, :parent_shard_id, :child_shard_id
          FIELDS = {
            PARENT_SHARD_ID => {:type => ::Thrift::Types::I32, :name => 'parent_shard_id'},
            CHILD_SHARD_ID => {:type => ::Thrift::Types::I32, :name => 'child_shard_id'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

        end

        class Remove_child_shard_result
          include ::Thrift::Struct
          EX = -1

          ::Thrift::Struct.field_accessor self, :ex
          FIELDS = {
            EX => {:type => ::Thrift::Types::STRUCT, :name => 'ex', :class => Flock::FlockException}
          }

          def struct_fields; FIELDS; end

          def validate
          end

        end

        class Replace_child_shard_args
          include ::Thrift::Struct
          OLD_CHILD_SHARD_ID = 1
          NEW_CHILD_SHARD_ID = 2

          ::Thrift::Struct.field_accessor self, :old_child_shard_id, :new_child_shard_id
          FIELDS = {
            OLD_CHILD_SHARD_ID => {:type => ::Thrift::Types::I32, :name => 'old_child_shard_id'},
            NEW_CHILD_SHARD_ID => {:type => ::Thrift::Types::I32, :name => 'new_child_shard_id'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

        end

        class Replace_child_shard_result
          include ::Thrift::Struct
          EX = -1

          ::Thrift::Struct.field_accessor self, :ex
          FIELDS = {
            EX => {:type => ::Thrift::Types::STRUCT, :name => 'ex', :class => Flock::FlockException}
          }

          def struct_fields; FIELDS; end

          def validate
          end

        end

        class List_shard_children_args
          include ::Thrift::Struct
          SHARD_ID = 1

          ::Thrift::Struct.field_accessor self, :shard_id
          FIELDS = {
            SHARD_ID => {:type => ::Thrift::Types::I32, :name => 'shard_id'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

        end

        class List_shard_children_result
          include ::Thrift::Struct
          SUCCESS = 0
          EX = -1

          ::Thrift::Struct.field_accessor self, :success, :ex
          FIELDS = {
            SUCCESS => {:type => ::Thrift::Types::LIST, :name => 'success', :element => {:type => ::Thrift::Types::STRUCT, :class => Flock::ShardChild}},
            EX => {:type => ::Thrift::Types::STRUCT, :name => 'ex', :class => Flock::FlockException}
          }

          def struct_fields; FIELDS; end

          def validate
          end

        end

        class Mark_shard_busy_args
          include ::Thrift::Struct
          SHARD_ID = 1
          BUSY = 2

          ::Thrift::Struct.field_accessor self, :shard_id, :busy
          FIELDS = {
            SHARD_ID => {:type => ::Thrift::Types::I32, :name => 'shard_id'},
            BUSY => {:type => ::Thrift::Types::I32, :name => 'busy'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

        end

        class Mark_shard_busy_result
          include ::Thrift::Struct
          EX = -1

          ::Thrift::Struct.field_accessor self, :ex
          FIELDS = {
            EX => {:type => ::Thrift::Types::STRUCT, :name => 'ex', :class => Flock::FlockException}
          }

          def struct_fields; FIELDS; end

          def validate
          end

        end

        class Copy_shard_args
          include ::Thrift::Struct
          SOURCE_SHARD_ID = 1
          DESTINATION_SHARD_ID = 2

          ::Thrift::Struct.field_accessor self, :source_shard_id, :destination_shard_id
          FIELDS = {
            SOURCE_SHARD_ID => {:type => ::Thrift::Types::I32, :name => 'source_shard_id'},
            DESTINATION_SHARD_ID => {:type => ::Thrift::Types::I32, :name => 'destination_shard_id'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

        end

        class Copy_shard_result
          include ::Thrift::Struct
          EX = -1

          ::Thrift::Struct.field_accessor self, :ex
          FIELDS = {
            EX => {:type => ::Thrift::Types::STRUCT, :name => 'ex', :class => Flock::FlockException}
          }

          def struct_fields; FIELDS; end

          def validate
          end

        end

        class Setup_migration_args
          include ::Thrift::Struct
          SOURCE_SHARD_INFO = 1
          DESTINATION_SHARD_INFO = 2

          ::Thrift::Struct.field_accessor self, :source_shard_info, :destination_shard_info
          FIELDS = {
            SOURCE_SHARD_INFO => {:type => ::Thrift::Types::STRUCT, :name => 'source_shard_info', :class => Flock::ShardInfo},
            DESTINATION_SHARD_INFO => {:type => ::Thrift::Types::STRUCT, :name => 'destination_shard_info', :class => Flock::ShardInfo}
          }

          def struct_fields; FIELDS; end

          def validate
          end

        end

        class Setup_migration_result
          include ::Thrift::Struct
          SUCCESS = 0
          EX = -1

          ::Thrift::Struct.field_accessor self, :success, :ex
          FIELDS = {
            SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => Flock::ShardMigration},
            EX => {:type => ::Thrift::Types::STRUCT, :name => 'ex', :class => Flock::FlockException}
          }

          def struct_fields; FIELDS; end

          def validate
          end

        end

        class Migrate_shard_args
          include ::Thrift::Struct
          MIGRATION = 1

          ::Thrift::Struct.field_accessor self, :migration
          FIELDS = {
            MIGRATION => {:type => ::Thrift::Types::STRUCT, :name => 'migration', :class => Flock::ShardMigration}
          }

          def struct_fields; FIELDS; end

          def validate
          end

        end

        class Migrate_shard_result
          include ::Thrift::Struct
          EX = -1

          ::Thrift::Struct.field_accessor self, :ex
          FIELDS = {
            EX => {:type => ::Thrift::Types::STRUCT, :name => 'ex', :class => Flock::FlockException}
          }

          def struct_fields; FIELDS; end

          def validate
          end

        end

        class Set_forwarding_args
          include ::Thrift::Struct
          FORWARDING = 1

          ::Thrift::Struct.field_accessor self, :forwarding
          FIELDS = {
            FORWARDING => {:type => ::Thrift::Types::STRUCT, :name => 'forwarding', :class => Flock::Forwarding}
          }

          def struct_fields; FIELDS; end

          def validate
          end

        end

        class Set_forwarding_result
          include ::Thrift::Struct
          EX = -1

          ::Thrift::Struct.field_accessor self, :ex
          FIELDS = {
            EX => {:type => ::Thrift::Types::STRUCT, :name => 'ex', :class => Flock::FlockException}
          }

          def struct_fields; FIELDS; end

          def validate
          end

        end

        class Replace_forwarding_args
          include ::Thrift::Struct
          OLD_SHARD_ID = 1
          NEW_SHARD_ID = 2

          ::Thrift::Struct.field_accessor self, :old_shard_id, :new_shard_id
          FIELDS = {
            OLD_SHARD_ID => {:type => ::Thrift::Types::I32, :name => 'old_shard_id'},
            NEW_SHARD_ID => {:type => ::Thrift::Types::I32, :name => 'new_shard_id'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

        end

        class Replace_forwarding_result
          include ::Thrift::Struct
          EX = -1

          ::Thrift::Struct.field_accessor self, :ex
          FIELDS = {
            EX => {:type => ::Thrift::Types::STRUCT, :name => 'ex', :class => Flock::FlockException}
          }

          def struct_fields; FIELDS; end

          def validate
          end

        end

        class Get_forwarding_args
          include ::Thrift::Struct
          TABLE_ID = 1
          BASE_ID = 2

          ::Thrift::Struct.field_accessor self, :table_id, :base_id
          FIELDS = {
            TABLE_ID => {:type => ::Thrift::Types::LIST, :name => 'table_id', :element => {:type => ::Thrift::Types::I32}},
            BASE_ID => {:type => ::Thrift::Types::I64, :name => 'base_id'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

        end

        class Get_forwarding_result
          include ::Thrift::Struct
          SUCCESS = 0
          EX = -1

          ::Thrift::Struct.field_accessor self, :success, :ex
          FIELDS = {
            SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => Flock::ShardInfo},
            EX => {:type => ::Thrift::Types::STRUCT, :name => 'ex', :class => Flock::FlockException}
          }

          def struct_fields; FIELDS; end

          def validate
          end

        end

        class Get_forwarding_for_shard_args
          include ::Thrift::Struct
          SHARD_ID = 1

          ::Thrift::Struct.field_accessor self, :shard_id
          FIELDS = {
            SHARD_ID => {:type => ::Thrift::Types::I32, :name => 'shard_id'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

        end

        class Get_forwarding_for_shard_result
          include ::Thrift::Struct
          SUCCESS = 0
          EX = -1

          ::Thrift::Struct.field_accessor self, :success, :ex
          FIELDS = {
            SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => Flock::Forwarding},
            EX => {:type => ::Thrift::Types::STRUCT, :name => 'ex', :class => Flock::FlockException}
          }

          def struct_fields; FIELDS; end

          def validate
          end

        end

        class Get_forwardings_args
          include ::Thrift::Struct

          FIELDS = {

          }

          def struct_fields; FIELDS; end

          def validate
          end

        end

        class Get_forwardings_result
          include ::Thrift::Struct
          SUCCESS = 0
          EX = -1

          ::Thrift::Struct.field_accessor self, :success, :ex
          FIELDS = {
            SUCCESS => {:type => ::Thrift::Types::LIST, :name => 'success', :element => {:type => ::Thrift::Types::STRUCT, :class => Flock::Forwarding}},
            EX => {:type => ::Thrift::Types::STRUCT, :name => 'ex', :class => Flock::FlockException}
          }

          def struct_fields; FIELDS; end

          def validate
          end

        end

        class Reload_forwardings_args
          include ::Thrift::Struct

          FIELDS = {

          }

          def struct_fields; FIELDS; end

          def validate
          end

        end

        class Reload_forwardings_result
          include ::Thrift::Struct
          EX = -1

          ::Thrift::Struct.field_accessor self, :ex
          FIELDS = {
            EX => {:type => ::Thrift::Types::STRUCT, :name => 'ex', :class => Flock::FlockException}
          }

          def struct_fields; FIELDS; end

          def validate
          end

        end

        class Find_current_forwarding_args
          include ::Thrift::Struct
          TABLE_ID = 1
          ID = 2

          ::Thrift::Struct.field_accessor self, :table_id, :id
          FIELDS = {
            TABLE_ID => {:type => ::Thrift::Types::LIST, :name => 'table_id', :element => {:type => ::Thrift::Types::I32}},
            ID => {:type => ::Thrift::Types::I64, :name => 'id'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

        end

        class Find_current_forwarding_result
          include ::Thrift::Struct
          SUCCESS = 0
          EX = -1

          ::Thrift::Struct.field_accessor self, :success, :ex
          FIELDS = {
            SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => Flock::ShardInfo},
            EX => {:type => ::Thrift::Types::STRUCT, :name => 'ex', :class => Flock::FlockException}
          }

          def struct_fields; FIELDS; end

          def validate
          end

        end

        class Shard_ids_for_hostname_args
          include ::Thrift::Struct
          HOSTNAME = 1
          CLASS_NAME = 2

          ::Thrift::Struct.field_accessor self, :hostname, :class_name
          FIELDS = {
            HOSTNAME => {:type => ::Thrift::Types::STRING, :name => 'hostname'},
            CLASS_NAME => {:type => ::Thrift::Types::STRING, :name => 'class_name'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

        end

        class Shard_ids_for_hostname_result
          include ::Thrift::Struct
          SUCCESS = 0
          EX = -1

          ::Thrift::Struct.field_accessor self, :success, :ex
          FIELDS = {
            SUCCESS => {:type => ::Thrift::Types::LIST, :name => 'success', :element => {:type => ::Thrift::Types::I32}},
            EX => {:type => ::Thrift::Types::STRUCT, :name => 'ex', :class => Flock::FlockException}
          }

          def struct_fields; FIELDS; end

          def validate
          end

        end

        class Shards_for_hostname_args
          include ::Thrift::Struct
          HOSTNAME = 1
          CLASS_NAME = 2

          ::Thrift::Struct.field_accessor self, :hostname, :class_name
          FIELDS = {
            HOSTNAME => {:type => ::Thrift::Types::STRING, :name => 'hostname'},
            CLASS_NAME => {:type => ::Thrift::Types::STRING, :name => 'class_name'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

        end

        class Shards_for_hostname_result
          include ::Thrift::Struct
          SUCCESS = 0
          EX = -1

          ::Thrift::Struct.field_accessor self, :success, :ex
          FIELDS = {
            SUCCESS => {:type => ::Thrift::Types::LIST, :name => 'success', :element => {:type => ::Thrift::Types::STRUCT, :class => Flock::ShardInfo}},
            EX => {:type => ::Thrift::Types::STRUCT, :name => 'ex', :class => Flock::FlockException}
          }

          def struct_fields; FIELDS; end

          def validate
          end

        end

        class Get_busy_shards_args
          include ::Thrift::Struct

          FIELDS = {

          }

          def struct_fields; FIELDS; end

          def validate
          end

        end

        class Get_busy_shards_result
          include ::Thrift::Struct
          SUCCESS = 0
          EX = -1

          ::Thrift::Struct.field_accessor self, :success, :ex
          FIELDS = {
            SUCCESS => {:type => ::Thrift::Types::LIST, :name => 'success', :element => {:type => ::Thrift::Types::STRUCT, :class => Flock::ShardInfo}},
            EX => {:type => ::Thrift::Types::STRUCT, :name => 'ex', :class => Flock::FlockException}
          }

          def struct_fields; FIELDS; end

          def validate
          end

        end

        class Get_parent_shard_args
          include ::Thrift::Struct
          SHARD_ID = 1

          ::Thrift::Struct.field_accessor self, :shard_id
          FIELDS = {
            SHARD_ID => {:type => ::Thrift::Types::I32, :name => 'shard_id'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

        end

        class Get_parent_shard_result
          include ::Thrift::Struct
          SUCCESS = 0
          EX = -1

          ::Thrift::Struct.field_accessor self, :success, :ex
          FIELDS = {
            SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => Flock::ShardInfo},
            EX => {:type => ::Thrift::Types::STRUCT, :name => 'ex', :class => Flock::FlockException}
          }

          def struct_fields; FIELDS; end

          def validate
          end

        end

        class Get_root_shard_args
          include ::Thrift::Struct
          SHARD_ID = 1

          ::Thrift::Struct.field_accessor self, :shard_id
          FIELDS = {
            SHARD_ID => {:type => ::Thrift::Types::I32, :name => 'shard_id'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

        end

        class Get_root_shard_result
          include ::Thrift::Struct
          SUCCESS = 0
          EX = -1

          ::Thrift::Struct.field_accessor self, :success, :ex
          FIELDS = {
            SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => Flock::ShardInfo},
            EX => {:type => ::Thrift::Types::STRUCT, :name => 'ex', :class => Flock::FlockException}
          }

          def struct_fields; FIELDS; end

          def validate
          end

        end

        class Get_child_shards_of_class_args
          include ::Thrift::Struct
          PARENT_SHARD_ID = 1
          CLASS_NAME = 2

          ::Thrift::Struct.field_accessor self, :parent_shard_id, :class_name
          FIELDS = {
            PARENT_SHARD_ID => {:type => ::Thrift::Types::I32, :name => 'parent_shard_id'},
            CLASS_NAME => {:type => ::Thrift::Types::STRING, :name => 'class_name'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

        end

        class Get_child_shards_of_class_result
          include ::Thrift::Struct
          SUCCESS = 0
          EX = -1

          ::Thrift::Struct.field_accessor self, :success, :ex
          FIELDS = {
            SUCCESS => {:type => ::Thrift::Types::LIST, :name => 'success', :element => {:type => ::Thrift::Types::STRUCT, :class => Flock::ShardInfo}},
            EX => {:type => ::Thrift::Types::STRUCT, :name => 'ex', :class => Flock::FlockException}
          }

          def struct_fields; FIELDS; end

          def validate
          end

        end

      end

    end
