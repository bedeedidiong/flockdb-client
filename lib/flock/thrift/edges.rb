#
# Autogenerated by Thrift
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#

    module Flock
      module Edges
        class Client < Flock::Shards::Client
          include ::Thrift::Client

          def counts_of_destinations_for(source_ids, graph_id)
            send_counts_of_destinations_for(source_ids, graph_id)
            return recv_counts_of_destinations_for()
          end

          def send_counts_of_destinations_for(source_ids, graph_id)
            send_message('counts_of_destinations_for', Counts_of_destinations_for_args, :source_ids => source_ids, :graph_id => graph_id)
          end

          def recv_counts_of_destinations_for()
            result = receive_message(Counts_of_destinations_for_result)
            return result.success unless result.success.nil?
            raise result.ex unless result.ex.nil?
            raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'counts_of_destinations_for failed: unknown result')
          end

          def counts_of_sources_for(destination_ids, graph_id)
            send_counts_of_sources_for(destination_ids, graph_id)
            return recv_counts_of_sources_for()
          end

          def send_counts_of_sources_for(destination_ids, graph_id)
            send_message('counts_of_sources_for', Counts_of_sources_for_args, :destination_ids => destination_ids, :graph_id => graph_id)
          end

          def recv_counts_of_sources_for()
            result = receive_message(Counts_of_sources_for_result)
            return result.success unless result.success.nil?
            raise result.ex unless result.ex.nil?
            raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'counts_of_sources_for failed: unknown result')
          end

          def add(source_id, graph_id, destination_id)
            send_add(source_id, graph_id, destination_id)
            recv_add()
          end

          def send_add(source_id, graph_id, destination_id)
            send_message('add', Add_args, :source_id => source_id, :graph_id => graph_id, :destination_id => destination_id)
          end

          def recv_add()
            result = receive_message(Add_result)
            raise result.ex unless result.ex.nil?
            return
          end

          def remove(source_id, graph_id, destination_id)
            send_remove(source_id, graph_id, destination_id)
            recv_remove()
          end

          def send_remove(source_id, graph_id, destination_id)
            send_message('remove', Remove_args, :source_id => source_id, :graph_id => graph_id, :destination_id => destination_id)
          end

          def recv_remove()
            result = receive_message(Remove_result)
            raise result.ex unless result.ex.nil?
            return
          end

          def archive(source_id)
            send_archive(source_id)
            recv_archive()
          end

          def send_archive(source_id)
            send_message('archive', Archive_args, :source_id => source_id)
          end

          def recv_archive()
            result = receive_message(Archive_result)
            raise result.ex unless result.ex.nil?
            return
          end

          def unarchive(source_id)
            send_unarchive(source_id)
            recv_unarchive()
          end

          def send_unarchive(source_id)
            send_message('unarchive', Unarchive_args, :source_id => source_id)
          end

          def recv_unarchive()
            result = receive_message(Unarchive_result)
            raise result.ex unless result.ex.nil?
            return
          end

          def add_at(source_id, graph_id, destination_id, updated_at)
            send_add_at(source_id, graph_id, destination_id, updated_at)
            recv_add_at()
          end

          def send_add_at(source_id, graph_id, destination_id, updated_at)
            send_message('add_at', Add_at_args, :source_id => source_id, :graph_id => graph_id, :destination_id => destination_id, :updated_at => updated_at)
          end

          def recv_add_at()
            result = receive_message(Add_at_result)
            raise result.ex unless result.ex.nil?
            return
          end

          def remove_at(source_id, graph_id, destination_id, updated_at)
            send_remove_at(source_id, graph_id, destination_id, updated_at)
            recv_remove_at()
          end

          def send_remove_at(source_id, graph_id, destination_id, updated_at)
            send_message('remove_at', Remove_at_args, :source_id => source_id, :graph_id => graph_id, :destination_id => destination_id, :updated_at => updated_at)
          end

          def recv_remove_at()
            result = receive_message(Remove_at_result)
            raise result.ex unless result.ex.nil?
            return
          end

          def contains(source_id, graph_id, destination_id)
            send_contains(source_id, graph_id, destination_id)
            return recv_contains()
          end

          def send_contains(source_id, graph_id, destination_id)
            send_message('contains', Contains_args, :source_id => source_id, :graph_id => graph_id, :destination_id => destination_id)
          end

          def recv_contains()
            result = receive_message(Contains_result)
            return result.success unless result.success.nil?
            raise result.ex unless result.ex.nil?
            raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'contains failed: unknown result')
          end

          def get(source_id, graph_id, destination_id)
            send_get(source_id, graph_id, destination_id)
            return recv_get()
          end

          def send_get(source_id, graph_id, destination_id)
            send_message('get', Get_args, :source_id => source_id, :graph_id => graph_id, :destination_id => destination_id)
          end

          def recv_get()
            result = receive_message(Get_result)
            return result.success unless result.success.nil?
            raise result.ex unless result.ex.nil?
            raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'get failed: unknown result')
          end

          def retry_errors()
            send_retry_errors()
            recv_retry_errors()
          end

          def send_retry_errors()
            send_message('retry_errors', Retry_errors_args)
          end

          def recv_retry_errors()
            result = receive_message(Retry_errors_result)
            raise result.ex unless result.ex.nil?
            return
          end

          def retry_migrate_errors()
            send_retry_migrate_errors()
            recv_retry_migrate_errors()
          end

          def send_retry_migrate_errors()
            send_message('retry_migrate_errors', Retry_migrate_errors_args)
          end

          def recv_retry_migrate_errors()
            result = receive_message(Retry_migrate_errors_result)
            raise result.ex unless result.ex.nil?
            return
          end

          def stop_writes()
            send_stop_writes()
            recv_stop_writes()
          end

          def send_stop_writes()
            send_message('stop_writes', Stop_writes_args)
          end

          def recv_stop_writes()
            result = receive_message(Stop_writes_result)
            raise result.ex unless result.ex.nil?
            return
          end

          def resume_writes()
            send_resume_writes()
            recv_resume_writes()
          end

          def send_resume_writes()
            send_message('resume_writes', Resume_writes_args)
          end

          def recv_resume_writes()
            result = receive_message(Resume_writes_result)
            raise result.ex unless result.ex.nil?
            return
          end

          def stop_writes_for(priority)
            send_stop_writes_for(priority)
            recv_stop_writes_for()
          end

          def send_stop_writes_for(priority)
            send_message('stop_writes_for', Stop_writes_for_args, :priority => priority)
          end

          def recv_stop_writes_for()
            result = receive_message(Stop_writes_for_result)
            raise result.ex unless result.ex.nil?
            return
          end

          def resume_writes_for(priority)
            send_resume_writes_for(priority)
            recv_resume_writes_for()
          end

          def send_resume_writes_for(priority)
            send_message('resume_writes_for', Resume_writes_for_args, :priority => priority)
          end

          def recv_resume_writes_for()
            result = receive_message(Resume_writes_for_result)
            raise result.ex unless result.ex.nil?
            return
          end

          def is_writing(priority)
            send_is_writing(priority)
            return recv_is_writing()
          end

          def send_is_writing(priority)
            send_message('is_writing', Is_writing_args, :priority => priority)
          end

          def recv_is_writing()
            result = receive_message(Is_writing_result)
            return result.success unless result.success.nil?
            raise result.ex unless result.ex.nil?
            raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'is_writing failed: unknown result')
          end

          def inject_job(priority, job)
            send_inject_job(priority, job)
            recv_inject_job()
          end

          def send_inject_job(priority, job)
            send_message('inject_job', Inject_job_args, :priority => priority, :job => job)
          end

          def recv_inject_job()
            result = receive_message(Inject_job_result)
            raise result.ex unless result.ex.nil?
            return
          end

          def select(operations, page)
            send_select(operations, page)
            return recv_select()
          end

          def send_select(operations, page)
            send_message('select', Select_args, :operations => operations, :page => page)
          end

          def recv_select()
            result = receive_message(Select_result)
            return result.success unless result.success.nil?
            raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'select failed: unknown result')
          end

          def select2(queries)
            send_select2(queries)
            return recv_select2()
          end

          def send_select2(queries)
            send_message('select2', Select2_args, :queries => queries)
          end

          def recv_select2()
            result = receive_message(Select2_result)
            return result.success unless result.success.nil?
            raise result.ex unless result.ex.nil?
            raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'select2 failed: unknown result')
          end

          def select_edges(queries)
            send_select_edges(queries)
            return recv_select_edges()
          end

          def send_select_edges(queries)
            send_message('select_edges', Select_edges_args, :queries => queries)
          end

          def recv_select_edges()
            result = receive_message(Select_edges_result)
            return result.success unless result.success.nil?
            raise result.ex unless result.ex.nil?
            raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'select_edges failed: unknown result')
          end

          def execute(operations)
            send_execute(operations)
            recv_execute()
          end

          def send_execute(operations)
            send_message('execute', Execute_args, :operations => operations)
          end

          def recv_execute()
            result = receive_message(Execute_result)
            return
          end

          def count(operations)
            send_count(operations)
            return recv_count()
          end

          def send_count(operations)
            send_message('count', Count_args, :operations => operations)
          end

          def recv_count()
            result = receive_message(Count_result)
            return result.success unless result.success.nil?
            raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'count failed: unknown result')
          end

          def count2(queries)
            send_count2(queries)
            return recv_count2()
          end

          def send_count2(queries)
            send_message('count2', Count2_args, :queries => queries)
          end

          def recv_count2()
            result = receive_message(Count2_result)
            return result.success unless result.success.nil?
            raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'count2 failed: unknown result')
          end

        end

        class Processor < Flock::Shards::Processor
          include ::Thrift::Processor

          def process_counts_of_destinations_for(seqid, iprot, oprot)
            args = read_args(iprot, Counts_of_destinations_for_args)
            result = Counts_of_destinations_for_result.new()
            begin
              result.success = @handler.counts_of_destinations_for(args.source_ids, args.graph_id)
            rescue Flock::FlockException => ex
              result.ex = ex
            end
            write_result(result, oprot, 'counts_of_destinations_for', seqid)
          end

          def process_counts_of_sources_for(seqid, iprot, oprot)
            args = read_args(iprot, Counts_of_sources_for_args)
            result = Counts_of_sources_for_result.new()
            begin
              result.success = @handler.counts_of_sources_for(args.destination_ids, args.graph_id)
            rescue Flock::FlockException => ex
              result.ex = ex
            end
            write_result(result, oprot, 'counts_of_sources_for', seqid)
          end

          def process_add(seqid, iprot, oprot)
            args = read_args(iprot, Add_args)
            result = Add_result.new()
            begin
              @handler.add(args.source_id, args.graph_id, args.destination_id)
            rescue Flock::FlockException => ex
              result.ex = ex
            end
            write_result(result, oprot, 'add', seqid)
          end

          def process_remove(seqid, iprot, oprot)
            args = read_args(iprot, Remove_args)
            result = Remove_result.new()
            begin
              @handler.remove(args.source_id, args.graph_id, args.destination_id)
            rescue Flock::FlockException => ex
              result.ex = ex
            end
            write_result(result, oprot, 'remove', seqid)
          end

          def process_archive(seqid, iprot, oprot)
            args = read_args(iprot, Archive_args)
            result = Archive_result.new()
            begin
              @handler.archive(args.source_id)
            rescue Flock::FlockException => ex
              result.ex = ex
            end
            write_result(result, oprot, 'archive', seqid)
          end

          def process_unarchive(seqid, iprot, oprot)
            args = read_args(iprot, Unarchive_args)
            result = Unarchive_result.new()
            begin
              @handler.unarchive(args.source_id)
            rescue Flock::FlockException => ex
              result.ex = ex
            end
            write_result(result, oprot, 'unarchive', seqid)
          end

          def process_add_at(seqid, iprot, oprot)
            args = read_args(iprot, Add_at_args)
            result = Add_at_result.new()
            begin
              @handler.add_at(args.source_id, args.graph_id, args.destination_id, args.updated_at)
            rescue Flock::FlockException => ex
              result.ex = ex
            end
            write_result(result, oprot, 'add_at', seqid)
          end

          def process_remove_at(seqid, iprot, oprot)
            args = read_args(iprot, Remove_at_args)
            result = Remove_at_result.new()
            begin
              @handler.remove_at(args.source_id, args.graph_id, args.destination_id, args.updated_at)
            rescue Flock::FlockException => ex
              result.ex = ex
            end
            write_result(result, oprot, 'remove_at', seqid)
          end

          def process_contains(seqid, iprot, oprot)
            args = read_args(iprot, Contains_args)
            result = Contains_result.new()
            begin
              result.success = @handler.contains(args.source_id, args.graph_id, args.destination_id)
            rescue Flock::FlockException => ex
              result.ex = ex
            end
            write_result(result, oprot, 'contains', seqid)
          end

          def process_get(seqid, iprot, oprot)
            args = read_args(iprot, Get_args)
            result = Get_result.new()
            begin
              result.success = @handler.get(args.source_id, args.graph_id, args.destination_id)
            rescue Flock::FlockException => ex
              result.ex = ex
            end
            write_result(result, oprot, 'get', seqid)
          end

          def process_retry_errors(seqid, iprot, oprot)
            args = read_args(iprot, Retry_errors_args)
            result = Retry_errors_result.new()
            begin
              @handler.retry_errors()
            rescue Flock::FlockException => ex
              result.ex = ex
            end
            write_result(result, oprot, 'retry_errors', seqid)
          end

          def process_retry_migrate_errors(seqid, iprot, oprot)
            args = read_args(iprot, Retry_migrate_errors_args)
            result = Retry_migrate_errors_result.new()
            begin
              @handler.retry_migrate_errors()
            rescue Flock::FlockException => ex
              result.ex = ex
            end
            write_result(result, oprot, 'retry_migrate_errors', seqid)
          end

          def process_stop_writes(seqid, iprot, oprot)
            args = read_args(iprot, Stop_writes_args)
            result = Stop_writes_result.new()
            begin
              @handler.stop_writes()
            rescue Flock::FlockException => ex
              result.ex = ex
            end
            write_result(result, oprot, 'stop_writes', seqid)
          end

          def process_resume_writes(seqid, iprot, oprot)
            args = read_args(iprot, Resume_writes_args)
            result = Resume_writes_result.new()
            begin
              @handler.resume_writes()
            rescue Flock::FlockException => ex
              result.ex = ex
            end
            write_result(result, oprot, 'resume_writes', seqid)
          end

          def process_stop_writes_for(seqid, iprot, oprot)
            args = read_args(iprot, Stop_writes_for_args)
            result = Stop_writes_for_result.new()
            begin
              @handler.stop_writes_for(args.priority)
            rescue Flock::FlockException => ex
              result.ex = ex
            end
            write_result(result, oprot, 'stop_writes_for', seqid)
          end

          def process_resume_writes_for(seqid, iprot, oprot)
            args = read_args(iprot, Resume_writes_for_args)
            result = Resume_writes_for_result.new()
            begin
              @handler.resume_writes_for(args.priority)
            rescue Flock::FlockException => ex
              result.ex = ex
            end
            write_result(result, oprot, 'resume_writes_for', seqid)
          end

          def process_is_writing(seqid, iprot, oprot)
            args = read_args(iprot, Is_writing_args)
            result = Is_writing_result.new()
            begin
              result.success = @handler.is_writing(args.priority)
            rescue Flock::FlockException => ex
              result.ex = ex
            end
            write_result(result, oprot, 'is_writing', seqid)
          end

          def process_inject_job(seqid, iprot, oprot)
            args = read_args(iprot, Inject_job_args)
            result = Inject_job_result.new()
            begin
              @handler.inject_job(args.priority, args.job)
            rescue Flock::FlockException => ex
              result.ex = ex
            end
            write_result(result, oprot, 'inject_job', seqid)
          end

          def process_select(seqid, iprot, oprot)
            args = read_args(iprot, Select_args)
            result = Select_result.new()
            result.success = @handler.select(args.operations, args.page)
            write_result(result, oprot, 'select', seqid)
          end

          def process_select2(seqid, iprot, oprot)
            args = read_args(iprot, Select2_args)
            result = Select2_result.new()
            begin
              result.success = @handler.select2(args.queries)
            rescue Flock::FlockException => ex
              result.ex = ex
            end
            write_result(result, oprot, 'select2', seqid)
          end

          def process_select_edges(seqid, iprot, oprot)
            args = read_args(iprot, Select_edges_args)
            result = Select_edges_result.new()
            begin
              result.success = @handler.select_edges(args.queries)
            rescue Flock::FlockException => ex
              result.ex = ex
            end
            write_result(result, oprot, 'select_edges', seqid)
          end

          def process_execute(seqid, iprot, oprot)
            args = read_args(iprot, Execute_args)
            result = Execute_result.new()
            @handler.execute(args.operations)
            write_result(result, oprot, 'execute', seqid)
          end

          def process_count(seqid, iprot, oprot)
            args = read_args(iprot, Count_args)
            result = Count_result.new()
            result.success = @handler.count(args.operations)
            write_result(result, oprot, 'count', seqid)
          end

          def process_count2(seqid, iprot, oprot)
            args = read_args(iprot, Count2_args)
            result = Count2_result.new()
            result.success = @handler.count2(args.queries)
            write_result(result, oprot, 'count2', seqid)
          end

        end

        # HELPER FUNCTIONS AND STRUCTURES

        class Counts_of_destinations_for_args
          include ::Thrift::Struct
          SOURCE_IDS = 1
          GRAPH_ID = 2

          ::Thrift::Struct.field_accessor self, :source_ids, :graph_id
          FIELDS = {
            SOURCE_IDS => {:type => ::Thrift::Types::STRING, :name => 'source_ids'},
            GRAPH_ID => {:type => ::Thrift::Types::I32, :name => 'graph_id'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

        end

        class Counts_of_destinations_for_result
          include ::Thrift::Struct
          SUCCESS = 0
          EX = -1

          ::Thrift::Struct.field_accessor self, :success, :ex
          FIELDS = {
            SUCCESS => {:type => ::Thrift::Types::STRING, :name => 'success'},
            EX => {:type => ::Thrift::Types::STRUCT, :name => 'ex', :class => Flock::FlockException}
          }

          def struct_fields; FIELDS; end

          def validate
          end

        end

        class Counts_of_sources_for_args
          include ::Thrift::Struct
          DESTINATION_IDS = 1
          GRAPH_ID = 2

          ::Thrift::Struct.field_accessor self, :destination_ids, :graph_id
          FIELDS = {
            DESTINATION_IDS => {:type => ::Thrift::Types::STRING, :name => 'destination_ids'},
            GRAPH_ID => {:type => ::Thrift::Types::I32, :name => 'graph_id'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

        end

        class Counts_of_sources_for_result
          include ::Thrift::Struct
          SUCCESS = 0
          EX = -1

          ::Thrift::Struct.field_accessor self, :success, :ex
          FIELDS = {
            SUCCESS => {:type => ::Thrift::Types::STRING, :name => 'success'},
            EX => {:type => ::Thrift::Types::STRUCT, :name => 'ex', :class => Flock::FlockException}
          }

          def struct_fields; FIELDS; end

          def validate
          end

        end

        class Add_args
          include ::Thrift::Struct
          SOURCE_ID = 1
          GRAPH_ID = 2
          DESTINATION_ID = 3

          ::Thrift::Struct.field_accessor self, :source_id, :graph_id, :destination_id
          FIELDS = {
            SOURCE_ID => {:type => ::Thrift::Types::I64, :name => 'source_id'},
            GRAPH_ID => {:type => ::Thrift::Types::I32, :name => 'graph_id'},
            DESTINATION_ID => {:type => ::Thrift::Types::I64, :name => 'destination_id'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

        end

        class Add_result
          include ::Thrift::Struct
          EX = -1

          ::Thrift::Struct.field_accessor self, :ex
          FIELDS = {
            EX => {:type => ::Thrift::Types::STRUCT, :name => 'ex', :class => Flock::FlockException}
          }

          def struct_fields; FIELDS; end

          def validate
          end

        end

        class Remove_args
          include ::Thrift::Struct
          SOURCE_ID = 1
          GRAPH_ID = 2
          DESTINATION_ID = 3

          ::Thrift::Struct.field_accessor self, :source_id, :graph_id, :destination_id
          FIELDS = {
            SOURCE_ID => {:type => ::Thrift::Types::I64, :name => 'source_id'},
            GRAPH_ID => {:type => ::Thrift::Types::I32, :name => 'graph_id'},
            DESTINATION_ID => {:type => ::Thrift::Types::I64, :name => 'destination_id'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

        end

        class Remove_result
          include ::Thrift::Struct
          EX = -1

          ::Thrift::Struct.field_accessor self, :ex
          FIELDS = {
            EX => {:type => ::Thrift::Types::STRUCT, :name => 'ex', :class => Flock::FlockException}
          }

          def struct_fields; FIELDS; end

          def validate
          end

        end

        class Archive_args
          include ::Thrift::Struct
          SOURCE_ID = 1

          ::Thrift::Struct.field_accessor self, :source_id
          FIELDS = {
            SOURCE_ID => {:type => ::Thrift::Types::I64, :name => 'source_id'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

        end

        class Archive_result
          include ::Thrift::Struct
          EX = -1

          ::Thrift::Struct.field_accessor self, :ex
          FIELDS = {
            EX => {:type => ::Thrift::Types::STRUCT, :name => 'ex', :class => Flock::FlockException}
          }

          def struct_fields; FIELDS; end

          def validate
          end

        end

        class Unarchive_args
          include ::Thrift::Struct
          SOURCE_ID = 1

          ::Thrift::Struct.field_accessor self, :source_id
          FIELDS = {
            SOURCE_ID => {:type => ::Thrift::Types::I64, :name => 'source_id'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

        end

        class Unarchive_result
          include ::Thrift::Struct
          EX = -1

          ::Thrift::Struct.field_accessor self, :ex
          FIELDS = {
            EX => {:type => ::Thrift::Types::STRUCT, :name => 'ex', :class => Flock::FlockException}
          }

          def struct_fields; FIELDS; end

          def validate
          end

        end

        class Add_at_args
          include ::Thrift::Struct
          SOURCE_ID = 1
          GRAPH_ID = 2
          DESTINATION_ID = 3
          UPDATED_AT = 4

          ::Thrift::Struct.field_accessor self, :source_id, :graph_id, :destination_id, :updated_at
          FIELDS = {
            SOURCE_ID => {:type => ::Thrift::Types::I64, :name => 'source_id'},
            GRAPH_ID => {:type => ::Thrift::Types::I32, :name => 'graph_id'},
            DESTINATION_ID => {:type => ::Thrift::Types::I64, :name => 'destination_id'},
            UPDATED_AT => {:type => ::Thrift::Types::I64, :name => 'updated_at'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

        end

        class Add_at_result
          include ::Thrift::Struct
          EX = -1

          ::Thrift::Struct.field_accessor self, :ex
          FIELDS = {
            EX => {:type => ::Thrift::Types::STRUCT, :name => 'ex', :class => Flock::FlockException}
          }

          def struct_fields; FIELDS; end

          def validate
          end

        end

        class Remove_at_args
          include ::Thrift::Struct
          SOURCE_ID = 1
          GRAPH_ID = 2
          DESTINATION_ID = 3
          UPDATED_AT = 4

          ::Thrift::Struct.field_accessor self, :source_id, :graph_id, :destination_id, :updated_at
          FIELDS = {
            SOURCE_ID => {:type => ::Thrift::Types::I64, :name => 'source_id'},
            GRAPH_ID => {:type => ::Thrift::Types::I32, :name => 'graph_id'},
            DESTINATION_ID => {:type => ::Thrift::Types::I64, :name => 'destination_id'},
            UPDATED_AT => {:type => ::Thrift::Types::I64, :name => 'updated_at'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

        end

        class Remove_at_result
          include ::Thrift::Struct
          EX = -1

          ::Thrift::Struct.field_accessor self, :ex
          FIELDS = {
            EX => {:type => ::Thrift::Types::STRUCT, :name => 'ex', :class => Flock::FlockException}
          }

          def struct_fields; FIELDS; end

          def validate
          end

        end

        class Contains_args
          include ::Thrift::Struct
          SOURCE_ID = 1
          GRAPH_ID = 2
          DESTINATION_ID = 3

          ::Thrift::Struct.field_accessor self, :source_id, :graph_id, :destination_id
          FIELDS = {
            SOURCE_ID => {:type => ::Thrift::Types::I64, :name => 'source_id'},
            GRAPH_ID => {:type => ::Thrift::Types::I32, :name => 'graph_id'},
            DESTINATION_ID => {:type => ::Thrift::Types::I64, :name => 'destination_id'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

        end

        class Contains_result
          include ::Thrift::Struct
          SUCCESS = 0
          EX = -1

          ::Thrift::Struct.field_accessor self, :success, :ex
          FIELDS = {
            SUCCESS => {:type => ::Thrift::Types::BOOL, :name => 'success'},
            EX => {:type => ::Thrift::Types::STRUCT, :name => 'ex', :class => Flock::FlockException}
          }

          def struct_fields; FIELDS; end

          def validate
          end

        end

        class Get_args
          include ::Thrift::Struct
          SOURCE_ID = 1
          GRAPH_ID = 2
          DESTINATION_ID = 3

          ::Thrift::Struct.field_accessor self, :source_id, :graph_id, :destination_id
          FIELDS = {
            SOURCE_ID => {:type => ::Thrift::Types::I64, :name => 'source_id'},
            GRAPH_ID => {:type => ::Thrift::Types::I32, :name => 'graph_id'},
            DESTINATION_ID => {:type => ::Thrift::Types::I64, :name => 'destination_id'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

        end

        class Get_result
          include ::Thrift::Struct
          SUCCESS = 0
          EX = -1

          ::Thrift::Struct.field_accessor self, :success, :ex
          FIELDS = {
            SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => Edges::Edge},
            EX => {:type => ::Thrift::Types::STRUCT, :name => 'ex', :class => Flock::FlockException}
          }

          def struct_fields; FIELDS; end

          def validate
          end

        end

        class Retry_errors_args
          include ::Thrift::Struct

          FIELDS = {

          }

          def struct_fields; FIELDS; end

          def validate
          end

        end

        class Retry_errors_result
          include ::Thrift::Struct
          EX = -1

          ::Thrift::Struct.field_accessor self, :ex
          FIELDS = {
            EX => {:type => ::Thrift::Types::STRUCT, :name => 'ex', :class => Flock::FlockException}
          }

          def struct_fields; FIELDS; end

          def validate
          end

        end

        class Retry_migrate_errors_args
          include ::Thrift::Struct

          FIELDS = {

          }

          def struct_fields; FIELDS; end

          def validate
          end

        end

        class Retry_migrate_errors_result
          include ::Thrift::Struct
          EX = -1

          ::Thrift::Struct.field_accessor self, :ex
          FIELDS = {
            EX => {:type => ::Thrift::Types::STRUCT, :name => 'ex', :class => Flock::FlockException}
          }

          def struct_fields; FIELDS; end

          def validate
          end

        end

        class Stop_writes_args
          include ::Thrift::Struct

          FIELDS = {

          }

          def struct_fields; FIELDS; end

          def validate
          end

        end

        class Stop_writes_result
          include ::Thrift::Struct
          EX = -1

          ::Thrift::Struct.field_accessor self, :ex
          FIELDS = {
            EX => {:type => ::Thrift::Types::STRUCT, :name => 'ex', :class => Flock::FlockException}
          }

          def struct_fields; FIELDS; end

          def validate
          end

        end

        class Resume_writes_args
          include ::Thrift::Struct

          FIELDS = {

          }

          def struct_fields; FIELDS; end

          def validate
          end

        end

        class Resume_writes_result
          include ::Thrift::Struct
          EX = -1

          ::Thrift::Struct.field_accessor self, :ex
          FIELDS = {
            EX => {:type => ::Thrift::Types::STRUCT, :name => 'ex', :class => Flock::FlockException}
          }

          def struct_fields; FIELDS; end

          def validate
          end

        end

        class Stop_writes_for_args
          include ::Thrift::Struct
          PRIORITY = 1

          ::Thrift::Struct.field_accessor self, :priority
          FIELDS = {
            PRIORITY => {:type => ::Thrift::Types::I32, :name => 'priority'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

        end

        class Stop_writes_for_result
          include ::Thrift::Struct
          EX = -1

          ::Thrift::Struct.field_accessor self, :ex
          FIELDS = {
            EX => {:type => ::Thrift::Types::STRUCT, :name => 'ex', :class => Flock::FlockException}
          }

          def struct_fields; FIELDS; end

          def validate
          end

        end

        class Resume_writes_for_args
          include ::Thrift::Struct
          PRIORITY = 1

          ::Thrift::Struct.field_accessor self, :priority
          FIELDS = {
            PRIORITY => {:type => ::Thrift::Types::I32, :name => 'priority'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

        end

        class Resume_writes_for_result
          include ::Thrift::Struct
          EX = -1

          ::Thrift::Struct.field_accessor self, :ex
          FIELDS = {
            EX => {:type => ::Thrift::Types::STRUCT, :name => 'ex', :class => Flock::FlockException}
          }

          def struct_fields; FIELDS; end

          def validate
          end

        end

        class Is_writing_args
          include ::Thrift::Struct
          PRIORITY = 1

          ::Thrift::Struct.field_accessor self, :priority
          FIELDS = {
            PRIORITY => {:type => ::Thrift::Types::I32, :name => 'priority'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

        end

        class Is_writing_result
          include ::Thrift::Struct
          SUCCESS = 0
          EX = -1

          ::Thrift::Struct.field_accessor self, :success, :ex
          FIELDS = {
            SUCCESS => {:type => ::Thrift::Types::BOOL, :name => 'success'},
            EX => {:type => ::Thrift::Types::STRUCT, :name => 'ex', :class => Flock::FlockException}
          }

          def struct_fields; FIELDS; end

          def validate
          end

        end

        class Inject_job_args
          include ::Thrift::Struct
          PRIORITY = 1
          JOB = 2

          ::Thrift::Struct.field_accessor self, :priority, :job
          FIELDS = {
            PRIORITY => {:type => ::Thrift::Types::I32, :name => 'priority'},
            JOB => {:type => ::Thrift::Types::STRING, :name => 'job'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

        end

        class Inject_job_result
          include ::Thrift::Struct
          EX = -1

          ::Thrift::Struct.field_accessor self, :ex
          FIELDS = {
            EX => {:type => ::Thrift::Types::STRUCT, :name => 'ex', :class => Flock::FlockException}
          }

          def struct_fields; FIELDS; end

          def validate
          end

        end

        class Select_args
          include ::Thrift::Struct
          OPERATIONS = 1
          PAGE = 2

          ::Thrift::Struct.field_accessor self, :operations, :page
          FIELDS = {
            OPERATIONS => {:type => ::Thrift::Types::LIST, :name => 'operations', :element => {:type => ::Thrift::Types::STRUCT, :class => Edges::SelectOperation}},
            PAGE => {:type => ::Thrift::Types::STRUCT, :name => 'page', :class => Flock::Page}
          }

          def struct_fields; FIELDS; end

          def validate
          end

        end

        class Select_result
          include ::Thrift::Struct
          SUCCESS = 0

          ::Thrift::Struct.field_accessor self, :success
          FIELDS = {
            SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => Flock::Results}
          }

          def struct_fields; FIELDS; end

          def validate
          end

        end

        class Select2_args
          include ::Thrift::Struct
          QUERIES = 1

          ::Thrift::Struct.field_accessor self, :queries
          FIELDS = {
            QUERIES => {:type => ::Thrift::Types::LIST, :name => 'queries', :element => {:type => ::Thrift::Types::STRUCT, :class => Edges::SelectQuery}}
          }

          def struct_fields; FIELDS; end

          def validate
          end

        end

        class Select2_result
          include ::Thrift::Struct
          SUCCESS = 0
          EX = -1

          ::Thrift::Struct.field_accessor self, :success, :ex
          FIELDS = {
            SUCCESS => {:type => ::Thrift::Types::LIST, :name => 'success', :element => {:type => ::Thrift::Types::STRUCT, :class => Flock::Results}},
            EX => {:type => ::Thrift::Types::STRUCT, :name => 'ex', :class => Flock::FlockException}
          }

          def struct_fields; FIELDS; end

          def validate
          end

        end

        class Select_edges_args
          include ::Thrift::Struct
          QUERIES = 1

          ::Thrift::Struct.field_accessor self, :queries
          FIELDS = {
            QUERIES => {:type => ::Thrift::Types::LIST, :name => 'queries', :element => {:type => ::Thrift::Types::STRUCT, :class => Edges::EdgeQuery}}
          }

          def struct_fields; FIELDS; end

          def validate
          end

        end

        class Select_edges_result
          include ::Thrift::Struct
          SUCCESS = 0
          EX = -1

          ::Thrift::Struct.field_accessor self, :success, :ex
          FIELDS = {
            SUCCESS => {:type => ::Thrift::Types::LIST, :name => 'success', :element => {:type => ::Thrift::Types::STRUCT, :class => Edges::EdgeResults}},
            EX => {:type => ::Thrift::Types::STRUCT, :name => 'ex', :class => Flock::FlockException}
          }

          def struct_fields; FIELDS; end

          def validate
          end

        end

        class Execute_args
          include ::Thrift::Struct
          OPERATIONS = 1

          ::Thrift::Struct.field_accessor self, :operations
          FIELDS = {
            OPERATIONS => {:type => ::Thrift::Types::STRUCT, :name => 'operations', :class => Edges::ExecuteOperations}
          }

          def struct_fields; FIELDS; end

          def validate
          end

        end

        class Execute_result
          include ::Thrift::Struct

          FIELDS = {

          }

          def struct_fields; FIELDS; end

          def validate
          end

        end

        class Count_args
          include ::Thrift::Struct
          OPERATIONS = 1

          ::Thrift::Struct.field_accessor self, :operations
          FIELDS = {
            OPERATIONS => {:type => ::Thrift::Types::LIST, :name => 'operations', :element => {:type => ::Thrift::Types::STRUCT, :class => Edges::SelectOperation}}
          }

          def struct_fields; FIELDS; end

          def validate
          end

        end

        class Count_result
          include ::Thrift::Struct
          SUCCESS = 0

          ::Thrift::Struct.field_accessor self, :success
          FIELDS = {
            SUCCESS => {:type => ::Thrift::Types::I32, :name => 'success'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

        end

        class Count2_args
          include ::Thrift::Struct
          QUERIES = 1

          ::Thrift::Struct.field_accessor self, :queries
          FIELDS = {
            QUERIES => {:type => ::Thrift::Types::LIST, :name => 'queries', :element => {:type => ::Thrift::Types::LIST, :element => {:type => ::Thrift::Types::STRUCT, :class => Edges::SelectOperation}}}
          }

          def struct_fields; FIELDS; end

          def validate
          end

        end

        class Count2_result
          include ::Thrift::Struct
          SUCCESS = 0

          ::Thrift::Struct.field_accessor self, :success
          FIELDS = {
            SUCCESS => {:type => ::Thrift::Types::STRING, :name => 'success'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

        end

      end

    end
